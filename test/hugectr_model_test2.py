from tritonclient.utils import *
import tritonhttpclient  as grpcclient
import tritonhttpclient  as httpclient

import numpy as np

model_name = 'identity'
prediction = np.array([0.30833802,0.03543083,0.15866387,0.09720056,0.15478903,0.15859143,0.08548295,0.2677695, 0.04621837,0.6698213 ],dtype='float32')

with httpclient.InferenceServerClient("localhost:8005") as client:
    input0_data = np.array([[0.005376344086021505,0.0008673026886383349,0.002331002331002331,0.004651162790697674,0.006083972751905593,0.0008793527963418925,0.007590132827324478,0.00591715976331361,0.0420323325635104,0.20000000000000004,0.021428571428571432,0.0,0.00646551724137931,0.008064516129032258,0.0006938421509106678,0.017482517482517484,0.009302325581395349,0.00045582314062143876,0.0015828350334154062,0.0014231499051233394,0.00591715976331361,0.0011547344110854505,0.20000000000000004,0.014285714285714287,0.0,0.010775862068965518,0.008064516129032258,0.0006938421509106678,0.000777000777000777,0.06976744186046513,0.003380688292942338,0.01582835033415406,0.0023719165085388997,0.00591715976331361,0.05681293302540416,0.20000000000000004,0.028571428571428567,0.0196078431372549,0.09913793103448276,0.0,0.15559410234171728,0.0,0.0,0.019315505583833468,0.0,0.0004743833017077799,0.0019723865877712037,0.0002309468822170901,0.0,0.0071428571428571435,0.0,0.0,0.010752688172043013,0.0005203816131830009,0.0,0.004651162790697674,1.8992630859226614e-05,0.0001758705592683785,0.0018975332068311196,0.0019723865877712037,0.0002309468822170901,0.20000000000000004,0.014285714285714287,0.0,0.0021551724137931034,0.0,0.0005203816131830009,0.0,0.0,0.05638912102104383,0.0,0.0004743833017077799,0.0019723865877712037,0.0016166281755196305,0.0,0.0071428571428571435,0.0,0.0,0.0,0.0008673026886383349,0.0011655011655011655,0.0,0.013934260173719263,0.0,0.0004743833017077799,0.003944773175542407,0.0006928406466512702,0.0,0.0071428571428571435,0.0,0.0,0.005376344086021505,0.0013876843018213356,0.0011655011655011655,0.004651162790697674,6.3308769530755405e-06,0.0001758705592683785,0.0009487666034155596,0.0019723865877712037,0.0002309468822170901,0.20000000000000004,0.014285714285714287,0.0,0.0021551724137931034,0.0,0.008326105810928014,0.0019425019425019425,0.04186046511627907,0.08358656841145634,0.04396763981709462,0.013757115749525616,0.0631163708086785,0.032794457274826785,0.0,0.014285714285714287,0.0,0.01939655172413793,0.0,0.006764960971379011,0.0,0.009302325581395349,0.1483324470105599,0.0038691523039043273,0.0009487666034155596,0.00591715976331361,0.0009237875288683604,0.0,0.014285714285714287,0.0,0.004310344827586207]],dtype='float32')#np.random.rand(*shape).astype(np.float32)
    input1_data =np.array([[630,1741,169492,439138,549150,549420,559916,561648,562203,595960,617230,785371,951890,954587,961209,1127998,1268021,1272637,1273122,1274952,1284808,1599234,1599246,1661028,1679074,1713689,630,1990,147679,391012,549150,549431,556396,561592,562203,570824,615122,746579,954093,954601,965592,1203368,1268012,1271308,1273122,1274949,1398048,1599234,1599246,1620406,1679074,1705287,229,1489,5692,497537,549150,549420,558854,561592,562203,573981,615452,805828,953557,954585,959831,1030053,1268018,1268964,1273925,1274950,1565787,1599237,1599246,1617619,1679041,1708257,630,1560,169492,375080,549150,549431,551664,561592,562203,610367,618268,785371,952074,954585,955742,1117406,1268013,1270190,1273925,1274950,1437198,1599234,1599246,1644461,1679041,1708257,821,1856,169492,543328,549150,549413,557681,561592,562203,578684,618284,752374,954408,954587,961411,968819,1268013,1268733,1273925,1274950,1317970,1599234,1599245,1655139,1679041,1708257,32,1697,52755,406753,549199,549419,553463,561592,562203,573981,616539,866155,953419,954585,954901,1150088,1268017,1270737,1273925,1274950,1320995,1599236,1599254,1635030,1679041,1708257,402,1852,253303,512039,549199,549431,553089,561592,562203,573981,616948,645523,952920,954585,966513,1173877,1268017,1271877,1273925,1274950,1315719,1599234,1599251,1607620,1679041,1708257,630,1560,169492,526391,549395,549413,552168,561648,562203,579031,617423,785371,952299,954585,955742,1117406,1268021,1270190,1273925,1274950,1437198,1599234,1599245,1644461,1679041,1708257,32,1943,274722,497537,549150,549420,559508,561592,562203,570711,613669,909530,952234,954601,965365,1122624,1268021,1269243,1273925,1274950,1275076,1599234,1599245,1617619,1679041,1708257,32,1641,274788,531598,549150,549421,553384,561592,562203,562482,618268,812618,952074,954585,956657,1134685,1268020,1270133,1273925,1274950,1293262,1599234,1599245,1603689,1679041,1708257]],dtype='uint32')
    input2_data = np.array([[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260]],dtype='int32')
    inputs = [
        httpclient.InferInput("DES", input0_data.shape,
                              np_to_triton_dtype(input0_data.dtype)),
        httpclient.InferInput("CATCOLUMN", input1_data.shape,
                              np_to_triton_dtype(input1_data.dtype)),
        httpclient.InferInput("ROWINDEX", input2_data.shape,
                              np_to_triton_dtype(input2_data.dtype)),

    ]

    inputs[0].set_data_from_numpy(input0_data)
    inputs[1].set_data_from_numpy(input1_data)
    inputs[2].set_data_from_numpy(input2_data)
    outputs = [
        httpclient.InferRequestedOutput("OUTPUT0")
    ]

    response = client.infer(model_name,
                            inputs,
                            request_id=str(1),
                            outputs=outputs)

    result = response.get_response()

    print(result)
    print(response.as_numpy("OUTPUT0"))
    if (prediction==response.as_numpy("OUTPUT0")).any():
        print("Hugectr_model1 test pass!")
        sys.exit(0)
    else:
        raise Exception("Hugectr_mode1 test fail")
        sys.exit(1)
